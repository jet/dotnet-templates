{
  "$schema": "http://json.schemastore.org/template",
  "author": "@jet @bartelink",
  "classifications": [
    "Event Sourcing",
    "Equinox",
    "Propulsion",
    "CosmosDb",
    "ChangeFeed",
    "ChangeFeedProcessor",
    "EventStore",
    "Kafka"
  ],
  "tags": {
    "language": "F#"
  },
  "identity": "Propulsion.Template.Projector",
  "name": "Propulsion Projector",
  "shortName": "proProjector",
  "sourceName": "ProjectorTemplate",
  "preferNameDirectory": true,

  "symbols": {
    "source": {
      "type": "parameter",
      "defaultValue": "cosmos",
      "description": "Define source the app is to be wired up for",
      "datatype": "choice",
      "choices": [
        {
          "choice": "cosmos",
          "description": "Wire for CosmosDB ChangeFeedProcessor source"
        },
        {
          "choice": "eventStore",
          "description": "Wire for EventStoreDB $all source"
        },
        {
          "choice": "sqlStreamStore",
          "description": "Wire for SqlStreamStore $all source"
        }
      ]
    },
    "esdb": {
      "type": "computed",
      "value": "(source == \"eventStore\")"
    },
    "sss": {
      "type": "computed",
      "value": "(source == \"sqlStreamStore\")"
    },
    "cosmos": {
      "type": "computed",
      "value": "(source == \"cosmos\")"
    },
    "synthesizeSequence": {
      "type": "parameter",
      "datatype": "bool",
      "isRequired": false,
      "defaultValue": "false",
      "description": "(--source=cosmos only) Include custom parsing / sequence generation logic for projecting arbitrary CosmosDB document changes, maintaining ordering."
    },
    "kafka": {
      "type": "parameter",
      "datatype": "bool",
      "isRequired": false,
      "defaultValue": "false",
      "description": "Include code projecting to Kafka."
    },
    "parallelOnly": {
      "type": "parameter",
      "datatype": "bool",
      "isRequired": false,
      "defaultValue": "false",
      "description": "Omit Stream abstractions from Kafka emission."
    }
  }
}
{
  "$schema": "http://json.schemastore.org/template",
  "author": "@jet @bartelink",
  "classifications": [
    "CosmosDb",
    "ChangeFeed",
    "ChangeFeedProcessor",
    "Event Sourcing",
    "Equinox",
    "EventStore",
    "Kafka",
    "Propulsion",
    "Reactor"
  ],
  "tags": {
    "language": "F#"
  },
  "identity": "Propulsion.Template.Reactor",
  "name": "Propulsion EventStore/Cosmos/Kafka Reactor",
  "shortName": "proReactor",
  "sourceName": "ReactorTemplate",
  "preferNameDirectory": true,
  "symbols": {
    "source": {
      "type": "parameter",
      "defaultValue": "multiSource",
      "description": "Define sources the app is to be wired up for",
      "datatype": "choice",
      "choices": [
        {
          "choice": "kafkaEventSpans",
          "description": "Use Kafka EventSpan feed as input"
        },
        {
          "choice": "changeFeedOnly",
          "description": "Only wire for CosmosDB ChangeFeedProcessor source"
        },
        {
          "choice": "multiSource",
          "description": "Support EventStore $all or CosmosDB ChangeFeedProcessor"
        }
      ]
    },
    "kafkaEventSpans": {
      "type": "computed",
      "value": "(source == \"kafkaEventSpans\")"
    },
    "changeFeedOnly": {
      "type": "computed",
      "value": "(source == \"changeFeedOnly\")"
    },
    "multiSource": {
      "type": "computed",
      "value": "(source == \"multiSource\")"
    },
    "filter": {
      "type": "parameter",
      "datatype": "bool",
      "isRequired": false,
      "defaultValue": "false",
      "description": "Include logic and commandline handling relating to filtering based on stream names."
    },
    "blank": {
      "type": "parameter",
      "datatype": "bool",
      "isRequired": false,
      "defaultValue": "false",
      "description": "Remove Ingestion/Summary Production sample code."
    },
    "kafka": {
      "type": "parameter",
      "datatype": "bool",
      "isRequired": false,
      "defaultValue": "false",
      "description": "Include code projecting to Kafka."
    }
  },
  "sources": [
    {
      "modifiers": [
        {
          "condition": "blank && !kafka",
          "exclude": [
            "Todo.fs",
            "Contract.fs"
          ]
        },
        {
          "condition": "blank && kafka",
          "exclude": [
            "Todo.fs"
          ]
        },
        {
          "condition": "kafka",
          "exclude": [
            "TodoSummary.fs",
            "Ingester.fs"
          ]
        },
        {
          "condition": "!multiSource && !kafka",
          "exclude": [
            "Handler.fs"
          ]
        },
        {
          "condition": "kafkaEventSpans",
          "exclude": [
            "README.md"
          ]
        }
      ]
    }
  ]
}